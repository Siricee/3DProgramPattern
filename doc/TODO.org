* DONE change to rescript

# * TODO use english comment instead of chinese comment

* DONE refactor: use worldState instead managerState in exec func

* DONE multithread demo


** DONE no worker

draw one triangle

draw 3000 triangles



** DONE open render worker


** DONE optimize: change programMap to program

# ** TODO move build model matrix to update->BuildModelMatrixJob
# ** TODO update add DoSomeHeaveComputeJob
** DONE add localToWorlds, add UpdateTransformJob

add


compute fps, timeline



** DONE update add //ComputeCollisionJob ComputePhysicsJob


** DONE move ComputePhysicsJob to physics worker


worker


noWorker add it


# ** TODO open more workers by pipeline + json



# ** TODO shared DO by SharedArrayBuffer

** DONE rename story_after to story_improve

** DONE support worker, no worker


** DONE add UMLs

before

improve

abstract



# 类图

时序图
two frame

three worker

post message

SharedArrayBuffer


** DONE add abstract code


* DONE glsl build demo

** DONE glsl compiler->Chunks

# change to rescript

# add as gulp task

# pass run test


////clean first



** DONE 

- load json
use most

配置数据
    shaders.json
    shader_libs.json

- parse json


run test in engine/

** DONE 
independent, add funcs to handle branch



# - handle shader libs with shader config
# static branch
#     fixed branch name
# dynamic branch
#     fixed

# <!-- define:
# handle define const -->


# pass run test

- handle sender
sender: add to specific sender array
attribute
uniform


add pos, type, send func, ...


engine:
add sendDataArr to state;
add log: create shader with glsl
add RenderJob:
    use it when draw;


pass run test

** DONE refactor: uniform material_shaders, no_material_shaders to shaders

remove material concept


# ** TODO rename splice_pattern_engine to engine


** DONE 
- get chunks to state
- Builder: shader libs + Chunks to vs glsl, fs glsl
support all parts




result:
glsl
sender



add getHandle

add set define count:light count


# fix:
# import
# body last newLine


# fix:
# basic material use render_basic;
# move render_basic from client to engine;
# handle multiple materials?:
#     change initBasicMaterialShader to allMaterials


** DONE refactor glsl: only remain used glsl

# ** TODO refactor: clean code

** DONE story before

glsl

send:
judge when render

*** DONE refactor:move duplicate to utils/


** DONE fix

2uniform

attribute order


** DONE abstract

draft


update import path


** DONE uml

domain model

flow


story improve:
shader组合图


abstract UML:
this pattern is not only for glsl, but for else!

load config

parse config

build target(string) by config

get runtime data when init by target




* DONE finish splice pattern article

# shaders.json hook

# vs_function或者fs_function

** DONE remove batch instance

** DONE update article 1

** DONE update article 2

remove comment

add image

finish TODO


# import converter


* DONE finish redoundo pattern article

** DONE update article 1

** DONE update article 2

remove comment

add image

finish TODO


* DONE finish ecs pattern article

# ** TODO fix code

** DONE update article 1

** DONE update article 2

remove comment

add image

finish TODO


* DONE finish 第二次记录




* DONE finish block pattern article

** DONE update article 1

# ** TODO update article 2

# remove comment

# add image

# finish TODO



* DONE finish pipeline pattern article

** DONE update article 1


* DONE finish multithread pattern article


** DONE update article 1

去掉重复代码


# * TODO 修改接口为type，《type》


* DONE finish dependent pattern article

** DONE draft

** DONE edit:统一格式; update 使用场景：推广; rename IRenderEngine to RenderEngine； replace Onion architecture image



* DONE 完成再看设计原则
每个设计原则给两个函数式编程的案例


** DONE draft


** DONE update






* TODO 前言

给出模式写作套路：
首先给出项目需求
然后用最简单的方法实现
然后可能给出一些改进方案实现
然后用模式的改进方案实现
然后进行抽象归纳，给出模式的定义
然后给出优缺点，具体的使用场景
然后进行扩展
然后给出项目中的实践经验
最后推荐更多资料


给出每个模式的使用场景





* TODO 书给出网站（包含代码）二维码
