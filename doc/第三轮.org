总结：
- 修改了错误
- 隐藏代码的实现细节，进行抽象，读者可到代码库中详细了解它们
- 圆润过渡语
- 补充内容
- 明确总-分结构




* TODO 修改结构性错误



* TODO 给出过渡语

书还需要更完备些，比如介绍一个东西，经典逻辑三问，我是谁，我从哪里来，到哪里去

而且前后需要承上启下，背景介绍清楚些，写作从容些

** TODO unify story

# 一家公司，开发项目

# 引入角色：
# 开发者
#     老王
#     小李
#     小陈
# # 经理
# #     老刘

# 老板
#     # 王总

# 用户


只有一个人时，则：
我们

涉及到多人时，则：
开发者
    甲、乙、丙、丁


** TODO unify 给出UML 的描述

先说“总体来看，xxx”
然后再介绍每个部分的具体模块



使用总-分-总?套路，最后一个总可选


# ** TODO 在给出代码->结束一段代码的分析时，给出承上启下语句：总结上段代码，引出下段代码


# ** TODO 统一给出代码：首先，我们看下xxx；然后，我们看下xxx；。。。
** TODO 给出代码

refer to 多线程模式：
使用总-分结构：
    总：
    首先，我们看下xxx代码；。。。
    分：
    ### [步骤1]
    首先，我们看下xxx代码；。。。
    ### [步骤2]
    首先，我们看下xxx代码；。。。



# ** TODO “运行Client的代码”要说明运行Client代码 

** TODO “运行Client的代码”单独成一个标题

** TODO 统一“概述解决方案”，与之前提出的问题对应

通过模板：
通过下面的改进来xxx：
xxx

** TODO 将“之前”改为具体的引用

如将“之前”改为“第一个案例代码”

* TODO 修改代码

文中代码只用于说明思路，隐藏实现细节、运行细节、配置细节
这些细节可在代码库的README中说明


** TODO 移除"import"相关代码


** TODO 简化文中的示例代码

*** TODO 多使用伪代码代替源代码
如多线程模式->简化GetXxxData:
从event.data中获得主线程传送来的数据...

保存到state...


把WebGL代码尽量用伪代码替代，如：
拼接模式->_sendAttributeData中调用WebGL代码可用伪代码表示




注意：伪代码不要用console.log
console.log用于要在运行结果中打印信息

*** TODO 删除细节代码




** TODO 删除配置运行的说明

如删除SharedArrayBuffer配置说明，将其放到代码库的README中

** TODO 文中的示例代码加入更多的注释


** TODO 使用第三方库的代码时，说明
# 如：使用Map作为Hash Map时，说明来自immutable
# ECS模式

注：应该隐藏具体的数据结构的说明，读者不需要关心它！





** TODO package.json supply dependencies, devDependencies?
e.g. most, commonlib



** TODO 抽象代码都用Typescript

** TODO 简化抽象代码




* TODO 修改UML

** TODO 简化UML



* TODO 改错

** TODO 重命名“类图”为“领域模型”

** TODO 重命名“客户”为“用户”

TODO handle 依赖隔离模式

** TODO 重命名“通用UML”为“领域模型”

** TODO 改错

ECS:heros ->heroes




* TODO 完成遵循的设计原则


* TODO 补充“更多资料推荐”
